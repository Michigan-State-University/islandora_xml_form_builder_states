<?php

/*
 * For Reference:  The valid conditions are:
 *     empty, filled,
 *     checked, unchecked,
 *     expanded, collapsed,
 *     value
 * The following states exist for conditions, 
 * but are not fully implemented:
 *     relevant, irrelevant,
 *     valid, invalid,
 *     touched, untouched,
 *     readwrite, readonly
 */
/*
 * These are the valid states for elements.
 *     enabled, disabled,
 *     required, optional,
 *     visible, invisible,
 *     checked, unchecked,
 *     expanded, collapsed
 * These items are valid but may not be implemented
 *     relevant, irrelevant,
 *     valid, invalid,
 *     touched, untouched,
 *     readwrite, readonly
 */
/*
 * An entry in the user_data field of a form in the Islandora
 * XML Form Builder would have the format:
 * Key: islandora_states_blah 
 *           where blah is the element action to take
 * Value: {"selector":{"condition":"testvalue"}
 *           value is in JSON format
 *           selector is a valid jQuery selector
 *           condition is from the list of conditions above
 *           testvalue is a valid states testvalue
 * See https://api.drupal.org/api/drupal/includes!common.inc/function/drupal_process_states/7
 *      for more information.
 */

/*
 * implements hook_form_alter
 */

function islandora_xml_form_builder_states_form_alter(&$form, &$form_state, $form_id) {
  /*
   * only edit forms that have an islandora xml form with an
   * "islandora_states_id" field.
   */

  if (!isset($form['islandora_states_id'])) {
    return;
  }
  $debug = (($form['islandora_states_id']['#value'] == 'debug') ? true : false);

  if ($debug) {
    dpm($form, "form");
  }

//recursively check form and process state data into form array.
  checkform_islandora_states($form, $form_state, $debug);

  if ($debug) {
    dpm($form_state, "form_state");
  }
}

function checkform_islandora_states(&$testArray, &$form_state, $debug = false, $heirarchy = '') {
  $tmp_heirarchy = '';
  foreach ($testArray as $key => &$value) {
//in debug mode, don't output duplicates
    if (($debug) and ($heirarchy !== $tmp_heirarchy)) {
      $tmp_heirarchy = $heirarchy;
      drupal_set_message('form_state[value' . $heirarchy . ']');
    }
    /*
     * States are entered in the Islandora Form Builder through
     * the user_data fields...ignore all others, but recurse other
     * possible fields (in the else section).
     */
    if (strpos($key, "#user_data") === 0) {
      if ($debug) {
        dpm($testArray, 'form_state[value' . $heirarchy . ']');
      }
      /*
       * find subkeys of #user_data that are associated with
       * islandora_states_
       */
      foreach ($value as $subkey => &$subvalue) {
        if (strpos($subkey, "islandora_states_") === 0) {
          $states_type = substr($subkey, strlen("islandora_states_"));
          if (!isset($testArray["#states"])) {
            $testArray["#states"] = array();
          }

          if (!in_array($states_type, array(
//these are the valid states for elements.
                'enabled', 'disabled',
                'required', 'optional',
                'visible', 'invisible',
                'checked', 'unchecked',
                'expanded', 'collapsed',
//these items are valid but may not be implemented
                'relevant', 'irrelevant',
                'valid', 'invalid',
                'touched', 'untouched',
                'readwrite', 'readonly',
                  )
              )) {
            continue;  //go to next element unless it is in the list
          }
          $subvalue = json_decode($subvalue, true);

          foreach ($subvalue as $selector => $condition) {
            if (isset($testArray["#states"][$states_type])) {
              if (!is_array($testArray["#states"][$states_type])) {
                $testArray["#states"][$states_type][] = $testArray["#states"][$states_type];
              }
              $testArray["#states"][$states_type][] = array($selector => $condition);
            }
            else {
              $testArray["#states"][$states_type] = array($selector => $condition);
            }
          }

          unset($value[$subkey]);
        }
        if (empty($testArray[$key])) {
          unset($testArray[$key]);
        }
      }
    }
    /*
     * ignore all array items that are not user_data but start with
     * # as these are keys for other aspects of form building.
     */
    else if ($key[0] == '#') {
      continue;
    }
    /*
     * If this item doesn't start with a # and is an array, it might
     * be a sub field that needs to be processed.
     */
    else if (is_array($value)) {
      $heirarchy_array = explode('][', $heirarchy);
      $heirarchy_array[] = $key;

      checkform_islandora_states($value
          , $form_state
          , $debug
          , implode('][', $heirarchy_array));
    }
  }
}

/*
 * Implements hook_help().
 */

function islandora_xml_form_builder_states_help($path, $arg) {

  if ($path == 'admin/help#islandora_xml_form_builder_states') { //The direction
    return t('Documentation for <a href="@url">islandora_xml_form_builder_states</a>', array(
      '@url' => url('admin/help/islandora_xml_form_builder_states_help')
        )
    );
  }
}

/*
 * Implements hook_menu().
 */

function islandora_xml_form_builder_states_menu() {
  $items['admin/help/islandora_xml_form_builder_states_help'] = array(
    'title' => 'Islandora XML Form Builder States Help',
    'type' => MENU_NORMAL_ITEM,
    'description' => 'Help page for islandora_xml_form_builder_states.',
    'access callback' => 'user_is_logged_in',
    'file' => 'islandora_xml_form_builder_states.help.inc',
    'page callback' => 'islandora_xml_form_builder_states_help_page',
  );
  return $items;
}

function islandora_xml_form_builder_states_required_field_validation($form, &$form_state) {
// find potential fields in the $form array and recursively check
  dpm($form_state, '$form_state: ');
  foreach ($form as $key => $field) {
    if ($key[0] != '#') {
      islandora_xml_form_builder_states_process_field_validation(
          $field
          , $form_state);
    }
  }
}

function islandora_xml_form_builder_states_process_field_validation(&$field, &$form_state) {

  if (is_array($field)) {
    if (isset($field['#states']['optional']) || isset($field['#states']['required'])) {
      dpm("In Validation Handler/Processor");
      dpm($field);
      if (isset($field['#states']['optional'])) {
        //assume it is required unless proven optional
        $required = true;
        $checked_state = $field['#states']['optional'];
      }
      else if (isset($field['#states']['required'])) {
        //assume it is optional unless proven required
        $required = false;
        $checked_state = $field['#states']['required'];
      }

      foreach ($checked_state as $cond_field_sel => $cond_vals) {
        dpm($cond_field_sel, "condition Field: ");
        // look for name= in the jquery selector
        //  - if that isn't there then give up (for now)
        preg_match('/name="(.+)"/', $cond_field_sel, $matches);

        dpm($matches, "matches: ");
        if (isset($matches[1])) {

          // get value identifier (e.g. value, tid, target_id)
          $value_ident = key($cond_vals);

          // loop over the values of the conditional field
          foreach ($form_state['values'][$matches[1]] as $cond_field_val) {

// check for a match
            if ($cond_vals[$value_ident] == $cond_field_val[$value_ident]) {
              if (isset($field['#states']['optional'])) {
                // now we know this field is NOT required
                $required = false;
              }
              else if (isset($field['#states']['required'])) {
                // now we know this field IS required
                $required = true;
              }
              break 2;
            }
          }
        }
      }

      dpm($required, "Required: ");
      dpm($field, "Field: ");
      if ($required) {
        $field_name = $field['#name'];
        $field_name = str_replace(']', '', $field_name);
        $field_name_array = explode('[', $field_name);

        $control_field = &$form_state['values'];
        foreach ($field_name_array as $key) {
          $control_field = &$control_field[$key];
        }
        $filled_in = false;
        foreach ($control_field as $item) {
          if (array_pop($item)) {
            $filled_in = true;
          }
        }
        if (!$filled_in) {
          form_set_error($field_name, t(':field is required based on the other form settings.', array(
            ':field' => $field[$lang]['#title'])));
        }
      }
    }
    else {
      foreach ($field as $key => $subfield) {
        if ($key[0] != '#') {
          islandora_xml_form_builder_states_process_field_validation($subfield, $form_state);
        }
      }
    }
  }
}