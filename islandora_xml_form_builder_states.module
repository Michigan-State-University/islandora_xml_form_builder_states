<?php

/*
 * For Reference:  The valid conditions are:
 *     empty, filled,
 *     checked, unchecked,
 *     expanded, collapsed,
 *     value
 * The following states exist for conditions, 
 * but are not fully implemented:
 *     relevant, irrelevant,
 *     valid, invalid,
 *     touched, untouched,
 *     readwrite, readonly
 */
/*
 * These are the valid states for elements.
 *     enabled, disabled,
 *     required, optional,
 *     visible, invisible,
 *     checked, unchecked,
 *     expanded, collapsed
 * These items are valid but may not be implemented
 *     relevant, irrelevant,
 *     valid, invalid,
 *     touched, untouched,
 *     readwrite, readonly
 */
/*
 * An entry in the user_data field of a form in the Islandora
 * XML Form Builder would have the format:
 * Key: islandora_states_blah 
 *           where blah is the element action to take
 * Value: {"selector":{"condition":"testvalue"}
 *           value is in JSON format
 *           selector is a valid jQuery selector
 *           condition is from the list of conditions above
 *           testvalue is a valid states testvalue
 * See https://api.drupal.org/api/drupal/includes!common.inc/function/drupal_process_states/7
 *      for more information.
 */

/*
 * implements hook_form_alter
 */

function islandora_xml_form_builder_states_form_alter(&$form, &$form_state, $form_id) {
 /*
  * only edit forms that have an islandora xml form with an
  * "islandora_states_id" field.
  */

 if (!isset($form['islandora_states_id'])) {
  return;
 }
 ($form['islandora_states_id'] == 'debug') ? $debug = true : $debug = false;
 drupal_set_message('<pre>'.print_r(($debug?'true':'false'),TRUE).'</pre>');
 
 dpm($form, "form");
 dpm($form_state, "form_state");

//recursively check form and process state data into form array.
 checkform_islandora_states($form, $form_state, $debug);
}

function checkform_islandora_states(&$testArray, &$form_state, $debug = false, $heirarchy = 'form_state[value') {
 $tmp_heirarchy = 'form_state[value';
 foreach ($testArray as $key => &$value) {
  //in debug mode, don't output duplicates
  if (($debug == true) and ($heirarchy !== $tmp_heirarchy)) {
   $tmp_heirarchy = $heirarchy;
   drupal_set_message($heirarchy . ']');
  }
  /*
   * States are entered in the Islandora Form Builder through
   * the user_data fields...ignore all others, but recurse other
   * possible fields (in the else section).
   */
  if (strpos($key, "#user_data") === 0) {
   dpm($testArray, $heirarchy . ']');
   /*
    * find subkeys of #user_data that are associated with
    * islandora_states_
    */
   foreach ($value as $subkey => &$subvalue) {
    if (strpos($subkey, "islandora_states_") === 0) {
     $states_type = substr($subkey, strlen("islandora_states_"));
     if (!isset($testArray["#states"])) {
      $testArray["#states"] = array();
     }

     if (!in_array($states_type, array(
//these are the valid states for elements.
           'enabled', 'disabled',
           'required', 'optional',
           'visible', 'invisible',
           'checked', 'unchecked',
           'expanded', 'collapsed',
//these items are valid but may not be implemented
           'relevant', 'irrelevant',
           'valid', 'invalid',
           'touched', 'untouched',
           'readwrite', 'readonly',
             )
         )) {
      continue;
     }

     $subvalue = json_decode($subvalue, true);

     foreach ($subvalue as $selector => $condition) {
      if (isset($testArray["#states"][$states_type])) {
       if (!is_array($testArray["#states"][$states_type])) {
        $testArray["#states"][$states_type][] = $testArray["#states"][$states_type];
       }
       $testArray["#states"][$states_type][] = array($selector => $condition);
      }
      else {
       $testArray["#states"][$states_type] = array($selector => $condition);
      }
     }

     unset($value[$subkey]);
    }
    if (empty($testArray[$key])) {
     unset($testArray[$key]);
    }
   }
  }
  /*
   * ignore all array items that are not user_data but start with
   * # as these are keys for other aspects of form building.
   */
  else if (strpos($key, '#') === 0) {
   continue;
  }
  /*
   * If this item doesn't start with a # and is an array, it might
   * be a sub field that needs to be processed.
   */
  else if (is_array($value)) {
   $heirarchy_array = explode('|', $heirarchy);
   $heirarchy_array[] = $key;

   checkform_islandora_states($value
       , $form_state
       , $debug
       , implode('][', $heirarchy_array));
  }
 }
}

/*
 * Implements hook_help().
 */

function islandora_xml_form_builder_states_help($path, $arg) {

 if ($path == 'admin/help#islandora_xml_form_builder_states') { //The direction
  return t('Documentation for <a href="@url">islandora_xml_form_builder_states</a>', array(
    '@url' => url('admin/help/islandora_xml_form_builder_states_help')
      )
  );
 }
}

/*
 * Implements hook_menu().
 */

function islandora_xml_form_builder_states_menu() {
 $items['admin/help/islandora_xml_form_builder_states_help'] = array(
   'title' => 'Islandora XML Form Builder States Help',
   'type' => MENU_NORMAL_ITEM,
   'description' => 'Help page for islandora_xml_form_builder_states.',
   'access callback' => 'user_is_logged_in',
   'file' => 'islandora_xml_form_builder_states.help.inc',
   'page callback' => 'islandora_xml_form_builder_states_help_page',
 );
 return $items;
}

function islandora_xml_form_builder_states_required_field_validation($element, &$form_state) {
 dpm($element, '$element');
 dpm($form_state, '$form_state');

 if (!in_array($element['#states'], array('optional', 'required'))) {
  drupal_set_message('<pre>It is perhaps required.</pre>');

//find item based on jQuery selector

  return;
 }

 $valid = true;
 if (!$valid) {
  form_error($element, 'Based on conditions, this element is required!');
 }
}