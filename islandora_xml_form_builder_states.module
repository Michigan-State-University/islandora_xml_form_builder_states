<?php

/*
 * For Reference:  The valid conditions are:
 *     empty, filled,
 *     checked, unchecked,
 *     expanded, collapsed,
 *     value
 * The following states exist for conditions, 
 * but are not fully implemented:
 *     relevant, irrelevant,
 *     valid, invalid,
 *     touched, untouched,
 *     readwrite, readonly
 */
/*
 * These are the valid states for elements.
 *     enabled, disabled,
 *     required, optional,
 *     visible, invisible,
 *     checked, unchecked,
 *     expanded, collapsed
 * These items are valid but may not be implemented
 *     relevant, irrelevant,
 *     valid, invalid,
 *     touched, untouched,
 *     readwrite, readonly
 */
/*
 * An entry in the user_data field of a form in the Islandora
 * XML Form Builder would have the format:
 * Key: islandora_states_blah 
 *           where blah is the element action to take
 * Value: {"selector":{"condition":"testvalue"}
 *           value is in JSON format
 *           selector is a valid jQuery selector
 *           condition is from the list of conditions above
 *           testvalue is a valid states testvalue
 * See https://api.drupal.org/api/drupal/includes!common.inc/function/drupal_process_states/7
 *      for more information.
 */

/*
 * implements hook_form_alter
 */

function islandora_xml_form_builder_states_form_alter(&$form, &$form_state, $form_id) {
  /*
   * only edit forms that have an islandora xml form with an
   * "islandora_states_id" field.
   */
  if (!isset($form['islandora_states_id'])) {
    return;
  }
  $debug = ($form['islandora_states_id']['#value'] == 'debug');

//recursively check form and process state data into form array.
  checkform_islandora_states($form, $form_state, $debug);

  if ($debug) {
    dpm($form, "form");
  }

  if ($debug) {
    dpm($form_state, "form_state");
  }
}

/*
 * Helper Function for islandora_xml_form_builder_states_form_alter
 */

function checkform_islandora_states(&$testArray, &$form_state, $debug = false, $heirarchy = '') {
  foreach ($testArray as $key => &$value) {
    /*
     * States are entered in the Islandora Form Builder through
     * the user_data fields...ignore all others, but recurse other
     * possible fields (in the else section).
     */
    if (strpos($key, "#user_data") === 0) {
      /*
       * find subkeys of #user_data that are associated with
       * islandora_states_
       */
      foreach ($value as $subkey => &$subvalue) {
        if (strpos($subkey, "islandora_states_") === 0) {
          $states_type = substr($subkey, strlen("islandora_states_"));
          if (!isset($testArray["#states"])) {
            $testArray["#states"] = array();
          }

          if (!in_array($states_type, array(
//these are the valid states for elements.
                'enabled', 'disabled',
                'required', 'optional',
                'visible', 'invisible',
                'checked', 'unchecked',
                'expanded', 'collapsed',
//these items are valid but may not be implemented
                'relevant', 'irrelevant',
                'valid', 'invalid',
                'touched', 'untouched',
                'readwrite', 'readonly',
                  )
              )) {
            continue;  //go to next element unless it is in the list
          }

          $subvalue = json_decode($subvalue, true);

          if (is_null($subvalue)) {
            drupal_set_message("JSON value in [Root (form)"
                . "$heirarchy]|More Advanced Controls|User Data|"
                . "$subkey is invalid!!", 'error');
            continue;
          }
          foreach ($subvalue as $selector => $condition) {
            if (isset($testArray["#states"][$states_type])) {
              if (!is_array($testArray["#states"][$states_type])) {
                $testArray["#states"][$states_type][] = $testArray["#states"][$states_type];
              }
              $testArray["#states"][$states_type][] = array($selector => $condition);
            }
            else {
              $testArray["#states"][$states_type] = array($selector => $condition);
            }
          }

          if ($debug) {
            dpm($testArray, "form[$heirarchy]");
          }

          unset($value[$subkey]);
        }
        if (empty($testArray[$key])) {
          unset($testArray[$key]);
        }
      }
    }
    /*
     * ignore all array items that are not user_data but start with
     * # as these are keys for other aspects of form building.
     */
    else if ($key[0] == '#') {
      continue;
    }
    /*
     * If this item doesn't start with a # and is an array, it might
     * be a sub field that needs to be processed.
     */
    else if (is_array($value)) {
      $heirarchy_array = explode('][', $heirarchy);
      $heirarchy_array[] = $key;

      checkform_islandora_states($value
          , $form_state
          , $debug
          , implode('][', $heirarchy_array));
    }
  }
}

/*
 * Implements hook_help().
 */

function islandora_xml_form_builder_states_help($path, $arg) {

  if ($path == 'admin/help#islandora_xml_form_builder_states') { //The direction
    return t('Documentation for <a href="@url">islandora_xml_form_builder_states</a>', array(
      '@url' => url('admin/help/islandora_xml_form_builder_states_help')
        )
    );
  }
}

/*
 * Implements hook_menu().
 */

function islandora_xml_form_builder_states_menu() {
  $items['admin/help/islandora_xml_form_builder_states_help'] = array(
    'title' => 'Islandora XML Form Builder States Help',
    'type' => MENU_NORMAL_ITEM,
    'description' => 'Help page for islandora_xml_form_builder_states.',
    'access callback' => 'user_is_logged_in',
    'file' => 'islandora_xml_form_builder_states.help.inc',
    'page callback' => 'islandora_xml_form_builder_states_help_page',
  );
  return $items;
}

/*
 * Validate required/optional fields in states api.
 */

function islandora_xml_form_builder_states_required_field_validation($form, &$form_state) {
// find potential fields in the $form array and recursively check
  dpm($form_state, '$form_state: ');
  foreach ($form as $key => $field) {
    if ($key[0] != '#') {
      islandora_xml_form_builder_states_process_field_validation(
          $field
          , $form_state
      );
    }
  }
}

function islandora_xml_form_builder_states_process_field_validation(&$field, &$form_state) {
  $debug = ($form_state['values']['islandora_states_id'] == 'debug');
  if (is_array($field)) { //find required/optional states
    if (isset($field['#states']['optional']) || isset($field['#states']['required'])) {
      if ($debug) {
        dpm($field, $field['#id']);
      }
      if (isset($field['#states']['optional'])) {
//assume it is required unless proven optional
        $slave_state = 'optional';
        $required = true;
        $slave_state_array = $field['#states']['optional'];
      }
      else if (isset($field['#states']['required'])) {
//assume it is optional unless proven required
        $slave_state = 'required';
        $required = false;
        $slave_state_array = $field['#states']['required'];
      }

      if ($debug) {
        dpm($slave_state_array, "slave_state_array: ");
      }

      foreach ($slave_state_array as $selector => $control_array) {
// look for name=, id= or # in the jquery selector
//  - if that isn't there then give up (for now)
        if (0 !== preg_match(
                '/name="(.+?)"|id="(.+?)"|#([A-Za-z][A-Za-z0-9\-_:.]*)/'
                , $selector
                , $matches
            )) {
          if ($debug) {
            dpm($selector, "selector: ");
          }

//find name for selected control field.
          if (!empty($matches[1])) {
            $selector_name = $matches[1];
          }
          elseif (!empty($matches[2])) {
            $selector_name = find_field_name_from_id($matches[2], $form_state['complete form'], $field['#name']);
          }
          elseif (!empty($matches[3])) {
            $selector_name = find_field_name_from_id($matches[3], $form_state['complete form'], $field['#name']);
          }

          $condition_match = false;

//loop through control states to find possible matches
          foreach ($control_array as $control_state => $condition) {
            switch ($control_state) {
              case "empty": case "filled": {
                  if (is_null($actual = checkform_islandora_states_empty($form_state, $selector_name)))
                    break;
                  $actual = (($control_state == "empty") ? $actual : !$actual);
                } break;
              case "checked": case "unchecked": {
                  if (is_null($actual = checkform_islandora_states_checked($form_state, $selector_name)))
                    break;
                  $actual = (($control_state == "checked") ? $actual : !$actual);
                } break;
              case "expanded": case "collapsed": {
                  if (is_null($actual = checkform_islandora_states_expanded($form_state, $selector_name)))
                    break;
                  $actual = (($control_state == "expanded") ? $actual : !$actual);
                } break;
              case "value": {
                  $actual = checkform_islandora_states_value_matches($form_state, $selector_name, $condition);
                } break;
              default: {
                  drupal_set_message(t("The control state "
                          . "$control_state cannot be evaluated at "
                          . "this time and so has been ignored."), "warning");
                } break;
            }
            if (is_null($actual)) {
              break;
            }
            else if ($slave_state == 'optional') {
              /*
               * Assume required=true.
               * If actual state == control state then
               *   required=false (now optional)
               */
              $required &=!($condition == $actual);
            }
            else { //if($slave_state == 'required')
              /*
               * Assume required=false.
               * If actual state == control state then
               *   required=true (now required)
               */
              $required |=($condition == $actual);
            }
          }
        } //end if found name or ide to use
        else { // didn't find a name or id to use.
          if ($debug) {
            drupal_set_message(t(
                    'Could not find a usable name or ID in selector: ')
                . $selector . '!'
            );
          }
          continue; //if not a usable name/id try next entry
        } //end didn't find name to use
      } //end looping through control fields
      if ($required) {
        $filled_in = !empty($field['#value']);

        if (!$filled_in) {
          form_set_error(
              $field['#name'], t(
                  ':field (:fieldpath) is required based on the other form settings.'
                  , array(':fieldpath' => 'form[' . $field['#name']
            , ':field' => $field['#title']
              ))
          );
          $form_state['rebuild'] = TRUE;
        }
      }
    } //end checking for optional/required on this field
    else { //field is not optional/required, look for subfields.
      foreach ($field as $key => $subfield) {
        if ($key[0] != '#') {
          islandora_xml_form_builder_states_process_field_validation($subfield, $form_state);
        }
      }
    }
  }//end if array, if it is not an array, it cannot have a state assigned to it.
}

function checkform_islandora_states_empty($form_state, $selector_name) {
  $debug = ($form_state['values']['islandora_states_id'] == 'debug');

  $value = &$form_state['values'];  //point to values
  $complete_form_field = &$form_state['complete form']; //point to form fields

  $name_path = explode("[", str_replace("]", "", $selector_name));
  foreach ($name_path as $name_path_piece) { //walk pointers to control field
    $value = &$value[$name_path_piece];
    $complete_form_field = &$complete_form_field[$name_path_piece];
  }

  if ($debug) {
    dpm($complete_form_field);
  }

  switch ($complete_form_field['#type']) {
    case 'file':
    case 'password':
    case 'select':
    case 'textarea':
    case 'textfield': {
        if ($complete_form_field['#value'] == '') {
          return true;
        }
        else {
          return false;
        }
      } break;
    case 'password_confirm': {
        if ($complete_form_field['#value']['pass1'] == '') {
          return true;
        }
        else {
          return false;
        }
      } break;
    case 'button': case 'checkbox': case 'checkboxes':
    case 'date': case 'fieldset': case 'form': case 'hidden':
    case 'image_button': case 'item': case 'machine_name':
    case 'markup': case 'radio': case 'radios': case 'submit':
    case 'tableselect': case 'token': case 'value':
    case 'vertical_tabs': case 'weight': default: {
        form_set_error($selector, "The states <em>filled/empty</em> "
            . "are not applicable to fields of type "
            . $complete_form_field['#type'] . ".");
        return null;
      } break;
  }
}

function checkform_islandora_states_expanded($form_state, $selector_name) {
  $debug = ($form_state['values']['islandora_states_id'] == 'debug');

  $value = &$form_state['values'];  //point to values
  $complete_form_field = &$form_state['complete form']; //point to form fields

  $name_path = explode("[", str_replace("]", "", $selector_name));
  foreach ($name_path as $name_path_piece) { //walk pointers to control field
    $value = &$value[$name_path_piece];
    $complete_form_field = &$complete_form_field[$name_path_piece];
  }

  if ($debug) {
    dpm($complete_form_field);
  }

  switch ($complete_form_field['#type']) {
    case 'button': case 'checkbox': case 'checkboxes':
    case 'date': case 'fieldset': case 'file':
    case 'image_button': case 'item': case 'machine_name':
    case 'markup': case 'password': case 'password_confirm':
    case 'radio': case 'radios': case 'select': case 'submit':
    case 'tableselect': case 'textarea': case 'textfield':
    case 'token': case 'value': case 'vertical_tabs': case 'weight': {
        return !$complete_form_field['#collapsed'];
      } break;
    case 'form': case 'hidden':
    default: {
        form_set_error($selector, "The states <em>expanded/collapsed</em> "
            . "are not applicable to fields of type "
            . $complete_form_field['#type'] . ".");
        return null;
      } break;
  }
}

function checkform_islandora_states_checked($form_state, $selector_name) {
  $debug = ($form_state['values']['islandora_states_id'] == 'debug');

  $value = &$form_state['values'];  //point to values
  $complete_form_field = &$form_state['complete form']; //point to form fields

  $name_path = explode("[", str_replace("]", "", $selector_name));
  foreach ($name_path as $name_path_piece) { //walk pointers to control field
    $value = &$value[$name_path_piece];
    $complete_form_field = &$complete_form_field[$name_path_piece];
  }

  if ($debug) {
    dpm($complete_form_field);
  }

  switch ($complete_form_field['#type']) {
    case 'checkbox': {
        return !$complete_form_field['#collapsed'];
      } break;
    case 'button': case 'checkboxes': case 'date':
    case 'fieldset': case 'file': case 'form': case 'hidden':
    case 'image_button': case 'item': case 'machine_name':
    case 'markup': case 'password': case 'password_confirm':
    case 'radio': case 'radios': case 'select': case 'submit':
    case 'tableselect': case 'textarea': case 'textfield':
    case 'token': case 'value': case 'vertical_tabs': case 'weight':
    default: {
        form_set_error($selector, "The states <em>checked/unchecked</em> "
            . "are not applicable to fields of type "
            . $complete_form_field['#type'] . ".");
        return null;
      } break;
  }
}

function checkform_islandora_states_value_matches($form_state, $selector_name, $condition) {
  $debug = ($form_state['values']['islandora_states_id'] == 'debug');

  $value = &$form_state['values'];  //point to values
  $complete_form_field = &$form_state['complete form']; //point to form fields

  $name_path = explode("[", str_replace("]", "", $selector_name));
  foreach ($name_path as $name_path_piece) { //walk pointers to control field
    $value = &$value[$name_path_piece];
    $complete_form_field = &$complete_form_field[$name_path_piece];
  }

  if ($debug) {
    dpm($complete_form_field);
  }

  return ($complete_form_field['#value'] == $condition);
}

/*
 * helper function to translate form field id into a form field name
 */

function find_field_name_from_id($selector_id, $form, $field_name) {
  foreach ($form as $key => $value) {
    if ($value['#id'] == $selector_id) {
      return $value['#name'];
    }
    elseif (is_array($value)) {
      foreach ($value as $form_field) {
        return find_field_name_from_id($selector_id, $form_field, $field_name);
      }
    }
  }
  form_set_error($field_name, $field_name['#name'] . ": Unable to locate control "
      . "field with ID $selector_id on field [$field_name");
  return;
}
